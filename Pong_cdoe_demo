#include "Arduino_LED_Matrix.h"
ArduinoLEDMatrix matrix;

int br = 9600;
int dt = 200;
int xPos = 6;
int yPos = 4;
int deltaX = 1;
int deltaY = 1;

int butPin = 12;
int butPin2 = 11;
int butAbi1 = 13;
int butPin3 = 7;
int butPin4 = 6;
int butAbi2 = 2;
const int PIN_RED = 10;
const int PIN_GREEN = 9;
const int PIN_BLUE = 8;
const int PIN_RED_2 = 5;
const int PIN_GREEN_2 = 4;
const int PIN_BLUE_2 = 3;

int myRow = 4;
int myRow2 = 5;
int myRow3 = 6;
int myRowEx = 7;
int myRow4 = 4;
int myRow5 = 5;
int myRow6 = 6;
int myRowEx_2 = 7;
int butVal;
int butVal2;
int butVal3;
int butVal4;
int butValAbi1;
int butValAbi2;
int player_1 = 0;
int player_2 = 0;
int rowInc = 1;
int Time = 1;
int game_over = 0;
int random_direction = random(1,5);
int i;
int j;
int P1_down = 0;
int P1_up = 1;
int P2_down = 0;
int P2_up = 1;
int mana_1 = 100;
int mana_2 = 100;
int Timestop_1 = 0;
int Timestop_2 = 0;
int Puppet_1 = 0;
int Puppet_2 = 0;

byte frame[8][12];
byte image1[8][12] = {
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0 },
        { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0 },
        { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0 },
        { 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0 },
        { 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0 },
        { 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
      };
byte image2[8][12] = {
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0 },
        { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0 },
        { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0 },
        { 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0 },
        { 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0 },
        { 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
      };
byte Win[8][12] = {
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1 },
        { 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1 },
        { 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1 },
        { 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1 },
        { 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1 },
        { 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
      };
byte Select_frame[8][12] = {
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1 },
        { 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0 },
        { 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1 },
        { 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1 },
        { 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1 },
        { 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
      };

void setup() {
  Serial.begin(br);
  matrix.begin();
  pinMode(butPin, INPUT_PULLUP);
  pinMode(butPin2, INPUT_PULLUP);
  pinMode(butPin3, INPUT_PULLUP);
  pinMode(butPin4, INPUT_PULLUP);
  pinMode(butAbi1, INPUT_PULLUP);
  pinMode(butAbi2, INPUT_PULLUP);

  pinMode(PIN_RED, OUTPUT);
  pinMode(PIN_GREEN, OUTPUT);
  pinMode(PIN_BLUE, OUTPUT);

  pinMode(PIN_RED_2, OUTPUT);
  pinMode(PIN_GREEN_2, OUTPUT);
  pinMode(PIN_BLUE_2, OUTPUT);
}

void loop() {

  //SELECT CHARACTER//
  while (player_1 == 0 || player_2 == 0){
    matrix.renderBitmap(Select_frame,8,12);
    Select_frame[8][12] = 1;
    if (digitalRead(butPin) == LOW){
      player_1 = 1;
      digitalWrite(PIN_RED, LOW);
    }
    if (digitalRead(butPin3) == LOW){
      player_2 = 1;
      digitalWrite(PIN_RED_2, LOW);
    }
    if (digitalRead(butPin2) == LOW){
      player_1 = 2;
      digitalWrite(PIN_BLUE, LOW);
    }
    if (digitalRead(butPin4) == LOW){
      player_2 = 2;
      digitalWrite(PIN_BLUE_2, LOW);
    }
    if (digitalRead(butAbi1) == LOW){
      player_1 = 3;
      digitalWrite(PIN_GREEN, LOW);
    }
    if (digitalRead(butAbi2) == LOW){
      player_2 = 3;
      digitalWrite(PIN_GREEN_2, LOW);
    }
    if (player_1 != 0 && player_2 != 0){
      matrix.renderBitmap(Select_frame,8,12);
      Select_frame[8][12] = 0;
    }
    if (player_1 == 0){
      digitalWrite(PIN_RED, HIGH);
      digitalWrite(PIN_BLUE, HIGH);
      digitalWrite(PIN_GREEN, HIGH);
    }
    if (player_2 == 0){
      digitalWrite(PIN_RED_2, HIGH);
      digitalWrite(PIN_BLUE_2, HIGH);
      digitalWrite(PIN_GREEN_2, HIGH);
    }
  }
  
  //GAME RUN//
  while (game_over != 1 && player_1 != 0 && player_2 != 0){
  butVal = digitalRead(butPin);
  butVal2 = digitalRead(butPin2);
  butVal3 = digitalRead(butPin3);
  butVal4 = digitalRead(butPin4);
  butValAbi1 = digitalRead(butAbi1);
  butValAbi2 = digitalRead(butAbi2);

  //LED ON//
  if (player_1 == 1 && mana_1 > 25){
    digitalWrite(PIN_RED, LOW);
  }else{
    digitalWrite(PIN_RED, HIGH);
  }
  if (player_1 == 2 && mana_1 > 25){
    digitalWrite(PIN_BLUE, LOW);
  }else{
    digitalWrite(PIN_BLUE, HIGH);
  }
  if (player_1 == 3 && mana_1 > 25){
    digitalWrite(PIN_GREEN, LOW);
  }else{
    digitalWrite(PIN_GREEN, HIGH);
  }
  if (player_2 == 1 && mana_2 > 25){
    digitalWrite(PIN_RED_2, LOW);
  }else{
    digitalWrite(PIN_RED_2, HIGH);
  }
  if (player_2 == 2 && mana_2 > 25){
    digitalWrite(PIN_BLUE_2, LOW);
  }else{
    digitalWrite(PIN_BLUE_2, HIGH);
  }
  if (player_2 == 3 && mana_2 > 25){
    digitalWrite(PIN_GREEN_2, LOW);
  }else{
    digitalWrite(PIN_GREEN_2, HIGH);
  }

  //PLAYER 1 CONTROL//
  if (butVal == 0 && myRow3 != 7 && player_1 == 1){
    myRow = myRow + rowInc;
    myRow2 = myRow2 + rowInc;
    myRow3 = myRow3 + rowInc;
  }
  if (butVal2 == 0 && myRow != 0 && player_1 == 1){
    myRow = myRow - rowInc;
    myRow2 = myRow2 - rowInc;
    myRow3 = myRow3 - rowInc;
  }
  if (butValAbi1 == 0 && player_1 == 1 && mana_1 > 25 && Time >= 25){
    Timestop_1 = 1;
    mana_1 = mana_1 - 25;  
  }else {
    Timestop_1 = 0;
  }

  if (butVal == 0 && player_1 == 2){
    P1_down = 1;
    P1_up = 0;
  }
  if (butVal2 == 0 && player_1 == 2){
    P1_down = 0;
    P1_up = 1;
  }
  if (P1_down == 1 && myRowEx != 7 && player_1 == 2){
    myRow = myRow + rowInc;
    myRow2 = myRow2 + rowInc;
    myRow3 = myRow3 + rowInc;
    myRowEx = myRowEx + rowInc;
  }
  if (P1_up == 1 && myRow != 0 && player_1 == 2){
    myRow = myRow - rowInc;
    myRow2 = myRow2 - rowInc;
    myRow3 = myRow3 - rowInc;
    myRowEx = myRowEx - rowInc;
  }
  if (butValAbi1 == 0 && player_1 == 2 && mana_1 > 25 && Time >= 25){
    deltaX = -deltaX;
    mana_1 = mana_1 - 25;  
  }

  if (butVal == 0 && myRow2 != 7 && player_1 == 3 && Puppet_1 != 1){
    myRow = myRow + rowInc;
    myRow2 = myRow2 + rowInc;
  }
  if (butVal2 == 0 && myRow != 0 && player_1 == 3 && Puppet_1 != 1){
    myRow = myRow - rowInc;
    myRow2 = myRow2 - rowInc;
  }
  if (butValAbi1 == 0 && player_1 == 3 && mana_1 > 25 && Time >= 25){
    Puppet_1 = 1;
    mana_1 = mana_1 - 2;  
  }else{
    Puppet_1 = 0;
  }
  if (Puppet_1 == 1 && butVal == 0 && myRowEx != 7){
    myRow3 = myRow3 + rowInc;
    myRowEx = myRowEx + rowInc;
  }
  if (Puppet_1 == 1 && butVal2 == 0 && myRow3 != 0){
    myRow3 = myRow3 - rowInc;
    myRowEx = myRowEx - rowInc;
  }
  
  //PLAYER 2 CONTROL//
  if (butVal3 == 0 && myRow6 != 7 && player_2 == 1){
    myRow4 = myRow4 + rowInc;
    myRow5 = myRow5 + rowInc;
    myRow6 = myRow6 + rowInc;
  }
  if (butVal4 == 0 && myRow4 != 0 && player_2 == 1){
    myRow4 = myRow4 - rowInc;
    myRow5 = myRow5 - rowInc;
    myRow6 = myRow6 - rowInc;
  }
  if (butValAbi2 == 0 && player_2 == 1 && mana_2 > 25 && Time >= 25){
    Timestop_2 = 1;
    mana_2 = mana_2 - 25;  
  }else {
    Timestop_2 = 0;
  }

  if (butVal3 == 0 && player_2 == 2){
    P2_down = 1;
    P2_up = 0;
  }
  if (butVal4 == 0 && player_2 == 2){
    P2_down = 0;
    P2_up = 1;
  }
  if (P2_down == 1 && myRowEx_2 != 7 && player_2 == 2){
    myRow4 = myRow4 + rowInc;
    myRow5 = myRow5 + rowInc;
    myRow6 = myRow6 + rowInc;
    myRowEx_2 = myRowEx_2 + rowInc;
  }
  if (P2_up == 1 && myRow4 != 0 && player_2 == 2){
    myRow4 = myRow4 - rowInc;
    myRow5 = myRow5 - rowInc;
    myRow6 = myRow6 - rowInc;
    myRowEx_2 = myRowEx_2 - rowInc;
  }
  if (butValAbi2 == 0 && player_2 == 2 && mana_2 > 25 && Time >= 25){
    deltaX = -deltaX;
    mana_2 = mana_2 - 25;  
  }

  if (butVal3 == 0 && myRow5 != 7 && player_2 == 3 && Puppet_2 != 1){
    myRow4 = myRow4 + rowInc;
    myRow5 = myRow5 + rowInc;
  }
  if (butVal4 == 0 && myRow4 != 0 && player_2 == 3 && Puppet_2 != 1){
    myRow4 = myRow4 - rowInc;
    myRow5 = myRow5 - rowInc;
  }
  if (butValAbi2 == 0 && player_2 == 3 && mana_2 > 25 && Time >= 25){
    Puppet_2 = 1;
    mana_2 = mana_2 - 2;  
  }else{
    Puppet_2 = 0;
  }
  if (Puppet_2 == 1 && butVal3 == 0 && myRowEx_2 != 7){
    myRow6 = myRow6 + rowInc;
    myRowEx_2 = myRowEx_2 + rowInc;
  }
  if (Puppet_2 == 1 && butVal4 == 0 && myRow6 != 0){
    myRow6 = myRow6 - rowInc;
    myRowEx_2 = myRowEx_2 - rowInc;
  }

    //DRAW GRAPHIC//
    for (i = 0; i <= 11; i = i + 1){
      for (j = 0; j <= 7; j = j + 1){
        frame[j][i] = 0;
        if (i == xPos && j == yPos){
          frame[j][i] = 1;
        }
        if (i == 0 && j == myRow) {
          frame[j][i] = 1;
        }
        if (i == 0 && j == myRow2) {
          frame[j][i] = 1;
        }
        if (i == 0 && j == myRow3) {
          frame[j][i] = 1;
        }
        if (i == 0 && j == myRowEx && (player_1 == 2 || player_1 == 3)) {
          frame[j][i] = 1;
        }
        if (i == 11 && j == myRow4) {
          frame[j][i] = 1;
        }
        if (i == 11 && j == myRow5) {
          frame[j][i] = 1;
        }
        if (i == 11 && j == myRow6) {
          frame[j][i] = 1;
        }
        if (i == 11 && j == myRowEx_2 && (player_2 == 2 || player_2 == 3)) {
          frame[j][i] = 1;
        }
      }
    }
    
    //BALL BOUCING WHEN TOUCH WALL//
    matrix.renderBitmap(frame,8,12);
      if (yPos>=7 || yPos<=0){
        deltaY = -deltaY;
      }

    //GAME OVER CODE AND BALL BOUCING WHEN TOUCH BOARD//
    if (xPos <= 0 && ((yPos != myRow && yPos != myRow2 && yPos != myRow3) || (yPos != myRow && yPos != myRow2 && yPos != myRow3 && yPos != myRowEx && (player_1 == 2 || player_1 == 3)))){
      matrix.renderBitmap(frame,8,12);
      frame[8][12] = 0;
      matrix.renderBitmap(image1,8,12);
      image1[8][12] = 1;
      delay(1000);
      matrix.renderBitmap(image1,8,12);
      image1[8][12] = 0;
      matrix.renderBitmap(Win,8,12);
      Win[8][12] = 1;
      game_over = 1;
    }
    if (xPos <= 0 && ((yPos == myRow || yPos == myRow2 || yPos == myRow3) || ( yPos == myRow || yPos == myRow2 || yPos == myRow3 || yPos == myRowEx && (player_1 == 2 || player_1 == 3)))){
      deltaX = -deltaX;
      if (dt > 5){
        dt = dt - 5;
        Serial.println(dt);
      }
    }
    
    if (xPos >= 11 && ((yPos != myRow4 && yPos != myRow5 && yPos != myRow6) || (yPos != myRow4 && yPos != myRow5 && yPos != myRow6 && yPos != myRowEx_2 && (player_2 == 2 || player_2 == 3)))){
      matrix.renderBitmap(frame,8,12);
      frame[8][12] = 0;
      matrix.renderBitmap(image2,8,12);
      image2[8][12] = 1;
      delay(1000);
      matrix.renderBitmap(image2,8,12);
      image2[8][12] = 0;
      matrix.renderBitmap(Win,8,12);
      Win[8][12] = 1;
      game_over = 1;
    }
    if (xPos >= 11 && ((yPos == myRow4 || yPos == myRow5 || yPos == myRow6) || (yPos == myRow4 || yPos == myRow5 || yPos == myRow6 || yPos == myRowEx_2 && (player_2 == 2 || player_2 == 3)))){
      deltaX = -deltaX;
      if (dt > 5){
        dt = dt - 5;
        Serial.println(dt);
      }
    }
    
    //BALL MOVING AND RANDOM DIRECTION//
    if (Time >= 25 && (Timestop_1 == 0 && Timestop_2 == 0)){
      if (random_direction == 1){
        xPos=xPos+deltaX;
        yPos=yPos+deltaY;
      }else if (random_direction == 2){
        xPos=xPos-deltaX;
        yPos=yPos+deltaY;
      }else if (random_direction == 3){
        xPos=xPos+deltaX;
        yPos=yPos-deltaY;
      }else if (random_direction == 4){
        xPos=xPos-deltaX;
        yPos=yPos-deltaY;
      }
    }

    //MANA AND TIME//
    if (mana_1 < 100){
      mana_1 += 1;
      Serial.println(mana_1);
    }
    if (mana_2 < 100){
      mana_2 += 1;
      Serial.println(mana_2);
    }
    Time = Time + 1;
    delay(dt);
  }
}
